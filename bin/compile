#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# chdir as maven expects
cd $BUILD_DIR

# unpack cache
for DIR in ".m2" ".maven" ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

# .server may already exist from a previous build or have been provided by the developer

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/langpack-java/maven-04.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven....."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

MAIN_POM="pom.xml"

if (.maven/bin/mvn help:evaluate -Dexpression=project.packaging | grep -s ^war) then
  WAR_PACKAGING=true
  MAIN_POM=".server/pom.xml"
  echo "-----> Web project detected. Looking for .server directory..."
  if [ ! -d .server ]; then
    cp -R $BIN_DIR/../opt/server .server
    echo "       Not found. Adding default Jetty wrapper in .server directory. For source code see https://github.com/jesperfj/embedded-jetty"
  fi
  echo "       Building from .server/pom.xml"
fi

# Hack to get the right mavenCache location when running slug-compiler locally 

if [[ $BUILD_DIR =~ ^/.* ]] ; then
# if absolute path, we assume we're in the cloud
    MAVEN_CACHE=/app/.m2/repository
else
# otherwise slug compiler is running locally.
# This hack obviously fails if you use an absolute path locally. Better suggestions welcome.
    MAVEN_CACHE=`pwd`/.m2/repository
fi

# build app
BUILDCMD=".maven/bin/mvn -B -Duser.home=$BUILD_DIR -DmavenCache=$MAVEN_CACHE -DskipTests -f $MAIN_POM clean package"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# TODO: The Java heap should be readable from environment.

if [ ! -e "Procfile" ] && [ -n "$WAR_PACKAGING" ] ; then
# TODO: Polish a bit more. But don't think we want to parse pom.xml to find out the war name
  WAR_FILE=`find target -name *.war`
  PROC="web:    java -Xmx512m -Djetty.port=\$PORT -jar .server/runjetty/target/RunJetty.jar $WAR_FILE"
  echo $PROC > Procfile
  echo "-----> No Procfile found. Generating Procfile as:"
  echo "       $PROC"

fi

# repack cache
mkdir -p $CACHE_DIR
for DIR in ".m2" ".maven" ; do
  rm -rf $CACHE_DIR/$DIR
  cp -r $DIR $CACHE_DIR/$DIR
done
