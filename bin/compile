#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

echo $BUILD_DIR

echo $CACHE_DIR

# Once stable, we should probably not pull dynamically

# chdir as maven expects
cd $BUILD_DIR

# unpack cache
for DIR in ".m2" ".maven" ".server" ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

# TODO: Only conditionally overwrite .server. For now we always overwrite
# So we get latest changes from language pack on each build

cp -R $BIN_DIR/../opt/server .server

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/langpack-java/maven-04.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven....."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

# build app
BUILDCMD=".maven/bin/mvn -B -Duser.home=$BUILD_DIR -DmavenCache=/app/.m2/repository -DskipTests -f .server/pom.xml clean package"
echo "-----> Building web app and Jetty wrapper with Maven..."
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# TODO: The Java heap should be readable from environment.

if [ ! -e "Procfile" ] ; then
  WAR_FILE=`find target -name *.war`
  PROC="web:    java -Xmx512m -Djetty.port=\$PORT -jar .server/runjetty/target/RunJetty.jar $WAR_FILE"
  echo $PROC > Procfile
  echo "-----> No Procfile found. Generating Procfile as:"
  echo "       $PROC"

fi

# repack cache
mkdir -p $CACHE_DIR
for DIR in ".m2" ".maven" ".server" ; do
  rm -rf $CACHE_DIR/$DIR
  cp -r $DIR $CACHE_DIR/$DIR
done
